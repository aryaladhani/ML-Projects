#importing all necessary libraries
import sys
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import pandas as pd
import sklearn

from sklearn import preprocessing
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
import torch.nn as nn
import torch

path ="/content/drive/MyDrive/Breast Cancer Dataset.csv"
data = pd.read_csv(path)
print(data)
print(f'The features in the dataset are:{ data.columns.values}')

#let us generate plots for how diagnosis varies with all the features
super_data.hist(figsize=(6,6))

M = super_data[super_data["diagnosis"]=="M"] # malignant cases
B = super_data[super_data["diagnosis"]=="B"] # benign cases
print(f'No. of malignant cases are: {len(M)}')
print(f'No. of benign cases are: {len(B)}')

plt.title("Smoothness mean and Compactness mean data distribution")
plt.scatter(M.smoothness_mean,M.compactness_mean, color = "#800080", label="malignant")
plt.scatter(B.smoothness_mean,B.compactness_mean, color = "#ADD8E6", label="benign")
plt.xlabel("smoothness_mean")
plt.ylabel("compactness_mean")
plt.legend()
plt.show()

plt.title("Smoothness mean and Compactness mean data distribution")
plt.scatter(M.smoothness_mean,M.compactness_mean, color = "#800080", label="malignant")
plt.scatter(B.smoothness_mean,B.compactness_mean, color = "#ADD8E6", label="benign")
plt.xlabel("smoothness_mean")
plt.ylabel("compactness_mean")
plt.legend()
plt.show()

#splitting the data into input features and labels
data_input = super_data.loc[:,super_data.columns!='diagnosis'].to_numpy()
input_features = super_data.loc[:,super_data.columns!='diagnosis'].columns.values
labels = super_data['diagnosis']
print(f'Input features of the data are: {input_features}')
print(f'No. of input features are: {len(input_features)}')
print(f'data labels are: {labels.values}')  
super_data.drop(['Unnamed: 32'], axis=1, inplace = True)

